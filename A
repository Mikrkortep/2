Переписывание библиотеки HAL на низкоуровневые регистры будет зависеть от конкретной модели микроконтроллера и настроек CAN. В общем случае, переписывание кода HAL на низкоуровневые регистры требует некоторого опыта и глубокого понимания работы микроконтроллера.

Стоит отметить, что переписывание кода библиотеки HAL на низкоуровневые регистры может значительно увеличить сложность разработки и поддержки кода. Это может требовать большего времени на отладку и оптимизацию, чем использование готовой библиотеки HAL.

Пример кода на низкоуровневые регистры для работы с модулем CAN (для микроконтроллера STM32F407):

```

// Настройки CAN

#define CAN_PORT    GPIOB

#define CAN_RX      GPIO_Pin_8

#define CAN_TX      GPIO_Pin_9

#define CAN_SPEED   500000

// Инициализация CAN

void CAN_Init(void)

{

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

    // Настройка портов ввода-вывода для CAN

    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = CAN_TX | CAN_RX;

    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;

    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

    GPIO_Init(CAN_PORT, &GPIO_InitStructure);

    GPIO_PinAFConfig(CAN_PORT, GPIO_PinSource8, GPIO_AF_CAN1);

    GPIO_PinAFConfig(CAN_PORT, GPIO_PinSource9, GPIO_AF_CAN1);

    // Настройка параметров CAN

    CAN_InitTypeDef CAN_InitStructure;

    CAN_StructInit(&CAN_InitStructure);

    CAN_InitStructure.CAN_ABOM = DISABLE;

    CAN_InitStructure.CAN_AWUM = DISABLE;

    CAN_InitStructure.CAN_BS1 = CAN_BS1_9tq;

    CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq;

    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;

    CAN_InitStructure.CAN_NART = DISABLE;

    CAN_InitStructure.CAN_Prescaler = 6;

    CAN_InitStructure.CAN_RFLM = DISABLE;

    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;

    CAN_InitStructure.CAN_TTCM = DISABLE;

    CAN_InitStructure.CAN_TXFP = ENABLE;

    CAN_Init(CAN1, &CAN_InitStructure);

    // Настройка фильтра CAN

    CAN_FilterInitTypeDef CAN_FilterInitStructure;

    CAN_FilterInitStructure.CAN_FilterNumber = 0;

    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;

    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;

    CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;

    CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;

    CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;

    CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_Filter_FIFO0;

    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;

    CAN_FilterInit(&CAN_FilterInitStructure);

}

// Отправка сообщения по CAN

void CAN_SendData(uint16_t addr, uint8_t *data, uint8_t len)

{

    CAN_TxMsgTypeDef can_tx_msg;

    can_tx_msg.StdId = addr;

    can_tx_msg.IDE = CAN_ID_STD;

    can_tx_msg.DLC = len;

    memcpy(can_tx_msg.Data, data, len);

    // Ожидание готовности передатчика

    while(CAN_TransmitStatus(CAN1, 0) != CAN_TxStatus_Ok);

    // Отправка сообщения

    CAN_Transmit(CAN1, &can_tx_msg);

}

// Чтение сообщения по CAN

void CAN_ReadData(uint16_t *addr, uint8_t *data, uint8_t *len)

{

    CAN_RxMsgTypeDef can_rx_msg;

    if (CAN_MessagePending(CAN1, CAN_FIFO0) > 0) {

        CAN_Receive(CAN1, CAN_FIFO0, &can_rx_msg);

        *addr = can_rx_msg.StdId;

        *len = can_rx_msg.DLC;

        memcpy(data, can_rx_msg.Data, *len);

    }

}

```

Для сброса диалога введите команду /context
